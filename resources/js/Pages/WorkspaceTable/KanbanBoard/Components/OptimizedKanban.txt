<script setup>
import TaskCard from "./Components/TaskCard.vue"
import { computed, nextTick, ref, watch } from 'vue'
import draggableComponent from 'vue3-draggable-next'
import { router } from "@inertiajs/vue3"
import { route } from "ziggy-js"

const props = defineProps({
    selectedKanban: Object,
    values: Array,
    columns: Array
})

const emit = defineEmits(['back', 'update'])

// Assuming props.columns[0] and its table_id will always be valid when this component is used.
// If props.columns can be empty, this needs a safer way to be derived, possibly within computed or with checks.
const table_id = props.columns[0].table_id

const statusColumnId = computed(() => props.selectedKanban?.column_id || null)

// Helper function to create a task object from row data
// This can be outside `setup` if it doesn't need access to `setup`'s reactive scope beyond its arguments.
function createTaskObject(rowData, statusColIdStr, allTableColumns) {
    const taskCellValues = Object.entries(rowData.values)
        .filter(([columnId]) => columnId !== statusColIdStr)
        .map(([columnId, cellValueDetails]) => {
            const columnSchema = allTableColumns?.find(col => col.id.toString() === columnId);
            return {
                columnName: columnSchema?.name || 'Unknown Column',
                colId: columnId,
                value: cellValueDetails.value,
                value_id: cellValueDetails.id // ID of this specific cell's value in the database
            };
        });

    const title = taskCellValues.length > 0 ? taskCellValues[0].value : 'Untitled Task';
    const details = taskCellValues.slice(1);

    return {
        id: rowData.id, // Unique ID for the task, e.g., "row_1"
        title: title,
        details: details,
        date: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) + '.', // Example date formatting
        status_value_id: rowData.values[statusColIdStr]?.id // DB ID of the cell holding the status for this task's row
    };
}

const kanbanColumns = computed(() => {
    const selectedStatusColId = statusColumnId.value;

    if (!selectedStatusColId) {
        return []; // No status column selected, so no Kanban columns to display
    }
    const statusColIdString = selectedStatusColId.toString();

    // 1. Group cell values by row
    const rowsMap = new Map();
    (props.values || []).forEach(cell => {
        const rowKey = `row_${cell.order}`;
        if (!rowsMap.has(rowKey)) {
            rowsMap.set(rowKey, {
                id: rowKey,
                order: cell.order,
                values: {} // { [columnIdStr]: { id: db_cell_id, value: display_value } }
            });
        }
        rowsMap.get(rowKey).values[cell.column_id.toString()] = {
            id: cell.id,
            value: cell.value
        };
    });
    const allRowDataObjects = Array.from(rowsMap.values());

    // 2. Filter active Kanban status options (e.g., "To Do", "In Progress")
    const activeKanbanOptions = (props.selectedKanban?.options || [])
        .filter(option => option.value !== 'None'); // Consider making 'None' a constant

    // 3. Map each active status option to a Kanban column object
    return activeKanbanOptions.map(kanbanOption => {
        // Find all tasks (rows) that belong to the current Kanban status option
        const tasksForThisColumn = allRowDataObjects
            .filter(rowData => rowData.values[statusColIdString]?.value === kanbanOption.value)
            .map(rowData => createTaskObject(rowData, statusColIdString, props.columns));

        return {
            id: kanbanOption.id || kanbanOption.value, // Unique ID for the column (for Vue's :key)
            title: kanbanOption.value,
            tasks: tasksForThisColumn,
            // Method to handle moving a task into this column
            moveTaskToThisColumn(taskBeingMoved) {
                if (!taskBeingMoved.status_value_id) {
                    console.error("Task is missing 'status_value_id', cannot update status.", taskBeingMoved);
                    return; // Prevent update if essential ID is missing
                }
                router.put(route("table.values.update", {
                    table: table_id,
                    value: taskBeingMoved.status_value_id, // The DB ID of the status cell to update
                    new_value: kanbanOption.value         // The new status string (this column's title)
                }));
            }
        };
    });
})

const update = (column, event) => {
    // event.item._underlying_vm_ usually holds the original item from the v-model array
    const taskObject = event.item._underlying_vm_;
    if (taskObject && column.moveTaskToThisColumn) {
        column.moveTaskToThisColumn(taskObject);
    } else {
        console.error("Failed to process task move: task object or move method not found.", { column, event });
    }
}

// ...existing code...
const deleteOption = (column) => {
    const optionToDelete = props.selectedKanban?.options?.find(opt =>
        opt.value === column.title &&
        opt.column_id === props.selectedKanban.column_id
    )

    if (confirm(`Are you sure you want to delete the "${column.title}" column?`)) {
        router.delete(route('selectvalues.destroy', { selectvalue: optionToDelete.id }), {
            onSuccess: () => {
                const targetValues = props.values
                    .filter((v) => {
                        return v.column_id == optionToDelete.column_id && v.value == optionToDelete.value
                    })

                targetValues.forEach((targetValue) => {
                    router.put(route("table.values.update", {
                        table: table_id,
                        value: targetValue.id,
                        new_value: "None"
                    }))
                })
            }
        })

    }

    emit('back')
}
</script>

<template>
    <div class="w-full">
        <div class="min-h-screen flex justify-evenly py-12">
            <div v-for="(column, index) in kanbanColumns" :key="column.id" class="bg-transparent px-3 w-3/12 py-3">
                <div class="flex flex-row">
                    <p class="roboto-font-bold capitalize tracking-wide text-lg">{{ column.title }}</p>
                    <div @click="deleteOption(column)">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-7 h-7 hover:text-red-500">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                        </svg>
                    </div>
                </div>
                <p v-if="column.tasks.length == 0" class="text-gray-400 italic py-4 text-center">
                    No tasks in this column
                </p>
                <draggableComponent v-model="column.tasks" @add="update(column, $event)" :animation="200"
                    ghost-class="ghost-card" group="tasks" item-key="id">
                    <template #item="{ element }">
                        <TaskCard :index="index" :task="element" class="mt-3 cursor-move"></TaskCard>
                    </template>
                </draggableComponent>
            </div>
        </div>
    </div>
</template>

<style scoped>
.ghost-card {
    opacity: 0.5;
    background: #F7FAFC;
    border: 1px solid #4299e1;
}
</style>